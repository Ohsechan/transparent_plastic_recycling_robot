#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#define trig 5
#define echo 4 
#include "HX711.h"
HX711 scale;

// 와이파이 설정
const char* ssid = "SEE";
const char* password = "19781978";

// mqtt 설정
const char* mqtt_server = "192.168.0.51";

// 무게센서 설정
const int LOADCELL_DOUT_PIN = 13;
const int LOADCELL_SCK_PIN = 12;

WiFiClient espClient;
PubSubClient client(espClient);

char weight[50]; 
int state = 0;  // init : 0, wait : 1, open : 2, close : 3, analysis : 4, motor_up : 5, motor_down : 6

void setup(){
  Serial.begin(115200); 
  pinMode(trig, OUTPUT);  
  pinMode(echo, INPUT);
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  delay(1000); 

  Serial.print("Connecting to : "); 
  Serial.println(ssid);  
  WiFi.begin(ssid, password); 

  while (WiFi.status() != WL_CONNECTED )  { 
    delay(2000); 
    Serial.println("....... not connected");   
   }

  Serial.println(""); 
  Serial.println("WiFi connected"); 
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
} 

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message : ");
  String msg = "";
  for (int i = 0; i < length; i++) {
    msg +=(char)payload[i];
  }
  
  if(msg == "reset"){
    client.publish("raspi","connect-sensor");
  }
  else if(msg == "wait"){
    state = 1;
  }
  else if(msg == "analysis"){
    state = 3; //  analysis 상태로 이동
  }
  else if(msg == "motor_up"){
    state = 5; // motor_up 상태로 이동
  }
  else if(msg = "motor_down"){
    state = 6; // motor_down 상태로 이동 
  }
  Serial.println(msg);
}



void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP8266Client_sensor")) {
      Serial.println("connected");
      client.subscribe("sensor");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}


void loop() {
  if (!client.connected()) {
    Serial.println("not connected");
    reconnect();
  }

  else{
       int distance = get_distance();
       Serial.print("state :");
       Serial.println(state);
       Serial.print("distance :");
       Serial.println(distance);
       Serial.print("weight :");
       Serial.println(scale.read());
       if(state == 1 &&(200 < distance || 180 > distance)){ 
           state++; // open state로 이동
       }
       else if(state == 2 && (190 >= distance && 185 <= distance) && (scale.read()/1000 >= 330)){ 
           state++; // close state로 이동
           client.publish("raspi","input");
           String packet = String(scale.read()); // weight 전송
           packet.toCharArray(weight,50);
           client.publish("raspi",weight);
       }
       else if(state ==5 && (190 >= distance && 185 <= distance) && (scale.read()/1000 <188) ){
          client.publish("motor","reset"); // wait 상태로 이동
          state = 0;
       }
       else if(state ==6 && (scale.read()/1000 <0) ){
          client.publish("motor","reset"); // wait 상태로 이동
          state = 0;
       }
      delay(500);
  }
  client.loop();
}

int get_distance(){
      int duration, distance;
      digitalWrite(trig, LOW);      
      delayMicroseconds(10);         
      digitalWrite(trig, HIGH);  
      delayMicroseconds(10);         
      digitalWrite(trig, LOW);      
      duration = pulseIn(echo, HIGH);  
      distance = duration * 170 / 1000;
      return distance;
}